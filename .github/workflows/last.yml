name: final

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history is available

      - name: Find Solution File
        id: find-solution
        shell: pwsh
        run: |
          $solutionPath = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
          if (-Not $solutionPath) {
            Write-Host "Error: No solution file (.sln) found"
            exit 1
          }
          echo "Found solution file at: $solutionPath"
          echo "SOLUTION_PATH=$solutionPath" >> $env:GITHUB_ENV

      # âœ… Move the version.json update step before build & test
      - name: Update version.json for version control
        shell: pwsh
        run: |
          $jsonPath = "version.json"
          if (Test-Path $jsonPath) {
            $jsonContent = Get-Content $jsonPath | ConvertFrom-Json
            
            # Ensure the publicReleaseRefSpec includes the additional stage
            if ($jsonContent.publicReleaseRefSpec -notcontains "^refs/heads/new-stage$") {
              $jsonContent.publicReleaseRefSpec += "^refs/heads/new-stage$"
            }
            
            # Save the updated JSON
            $jsonContent | ConvertTo-Json -Depth 10 | Set-Content $jsonPath
          } else {
            Write-Host "Error: version.json not found"
            exit 1
          }

      - name: Commit and push version.json update
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add version.json
          git commit -m "Update version.json to add new stage"
          git push origin main
        continue-on-error: true

      # ðŸ”¹ Build and test steps start after updating version.json
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x' # Change as needed

      - name: Restore NuGet packages
        run: dotnet restore "${{ env.SOLUTION_PATH }}"

      - name: Build solution with detailed logging
        run: dotnet build "${{ env.SOLUTION_PATH }}" -c Release

      - name: Run unit tests with code coverage
        run: dotnet test "${{ env.SOLUTION_PATH }}" -c Release --collect:"Code Coverage"

      - name: Install the ReportGenerator tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
        shell: pwsh
